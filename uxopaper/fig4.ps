%!PS-Adobe-3.0
%%Title: (small figure 4-Layer#1)
%%Creator: (MacDraw Pro: LaserWriter 8 8.3.3)
%%CreationDate: (4:38 PM Tuesday, May 13, 1997)
%%For: (CMS)
%%Pages: 1
%%DocumentFonts: Helvetica Chicago
%%DocumentNeededFonts: Helvetica Chicago
%%DocumentSuppliedFonts:
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Orientation: Landscape
%%DocumentMedia: Default 792 612 0 () ()
%ADO_ImageableArea: 30.96 30.96 761.04 582.96
%%EndComments
userdict begin/dscInfo 5 dict dup begin
/Title(small figure 4-Layer#1)def
/Creator(MacDraw Pro: LaserWriter 8 8.3.3)def
/CreationDate(4:38 PM Tuesday, May 13, 1997)def
/For(CMS)def
/Pages 1 def
end def end
/filterLineCapBugCTM where {pop false} {true} ifelse
version cvi 2014 eq revision 1.1 lt and and
{ userdict begin
 /sysdictSc systemdict /scale get def
 /sysdictSa systemdict /setstrokeadjust get def
 /sysdictLc systemdict /setlinecap get def
 /sysdictIm systemdict /initmatrix get def
 /sysdictCc systemdict /concat get def
 /sysdictSm systemdict /setmatrix get def
 /filterLineCapBugCTM matrix def
 /filterLCBCTM {
	currentstrokeadjust currentlinecap 2 eq and
	{
		filterLineCapBugCTM currentmatrix
		dup dup 0 get abs exch 3 get abs ne
		exch dup 1 get abs exch 2 get abs ne or
		{1 sysdictLc} if
	} if
 } bind def
 /scale {sysdictSc filterLCBCTM} bind def
 /setlinecap {sysdictLc filterLCBCTM} bind def
 /setstrokeadjust {sysdictSa filterLCBCTM} bind def
 /initmatrix {sysdictIm filterLCBCTM} bind def
 /concat {sysdictCc filterLCBCTM} bind def
 /setmatrix {sysdictSm filterLCBCTM} bind def
end 
/sysdictSc /sysdictSa /sysdictLc
/sysdictIm /sysdictCc /sysdictSm
6 {userdict exch undef} repeat
} if 
/md 243 dict def md begin/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if
%%BeginFile: adobe_psp_basic
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/bd{bind def}bind def
/xdf{exch def}bd
/xs{exch store}bd
/ld{load def}bd
/Z{0 def}bd
/T/true
/F/false
/:L/lineto
/lw/setlinewidth
/:M/moveto
/rl/rlineto
/rm/rmoveto
/:C/curveto
/:T/translate
/:K/closepath
/:mf/makefont
/gS/gsave
/gR/grestore
/np/newpath
14{ld}repeat
/$m matrix def
/av 83 def
/por true def
/normland false def
/psb-nosave{}bd
/pse-nosave{}bd
/us Z
/psb{/us save store}bd
/pse{us restore}bd
/level2
/languagelevel where
{
pop languagelevel 2 ge
}{
false
}ifelse
def
/featurecleanup
{
stopped
cleartomark
countdictstack exch sub dup 0 gt
{
{end}repeat
}{
pop
}ifelse
}bd
/noload Z
/startnoload
{
{/noload save store}if
}bd
/endnoload
{
{noload restore}if
}bd
level2 startnoload
/setjob
{
statusdict/jobname 3 -1 roll put
}bd
/setcopies
{
userdict/#copies 3 -1 roll put
}bd
level2 endnoload level2 not startnoload
/setjob
{
1 dict begin/JobName xdf currentdict end setuserparams
}bd
/setcopies
{
1 dict begin/NumCopies xdf currentdict end setpagedevice
}bd
level2 not endnoload
/pm Z
/mT Z
/sD Z
/realshowpage Z
/initializepage
{
/pm save store mT concat
}bd
/endp
{
pm restore showpage
}def
/$c/DeviceRGB def
/rectclip where
{
pop/rC/rectclip ld
}{
/rC
{
np 4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
clip np
}bd
}ifelse
/rectfill where
{
pop/rF/rectfill ld
}{
/rF
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
fill
gR
}bd
}ifelse
/rectstroke where
{
pop/rS/rectstroke ld
}{
/rS
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
stroke
gR
}bd
}ifelse
%%EndFile
%%BeginFile: adobe_psp_colorspace_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/G/setgray ld
/:F1/setgray ld
/:F/setrgbcolor ld
/:F4/setcmykcolor where
{
pop
/setcmykcolor ld
}{
{
3
{
dup
3 -1 roll add
dup 1 gt{pop 1}if
1 exch sub
4 1 roll
}repeat
pop
setrgbcolor
}bd
}ifelse
/:Fx
{
counttomark
{0{G}0{:F}{:F4}}
exch get
exec
pop
}bd
/:rg{/DeviceRGB :ss}bd
/:sc{$cs :ss}bd
/:dc{/$cs xdf}bd
/:sgl{}def
/:dr{}bd
/:fCRD{pop}bd
/:ckcs{}bd
/:ss{/$c xdf}bd
/$cs Z
%%EndFile
level2 startnoload
%%BeginFile: adobe_psp_level1_basicimages
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/$i false def
/flipinvert
statusdict begin
version cvr 47.0 lt
end
def
/iw Z
/ih Z
/im_save Z
/setupimageproc Z
/polarity Z
/smoothflag Z
/$z Z
/bpc Z
/smooth_moredata Z
/datatype Z
/:f
{
/im_save save store
/datatype xs
$i flipinvert
and
xor
/polarity xs
/smoothflag xs
concat
/$z exch string store
/bpc xs
/ih xs
/iw xs
/smoothflag
smoothflag
bpc 1 eq and
smoothflag and
userdict/sc_smooth known and
vmstatus pop exch pop iw 3 mul sub 1000 gt and
iw 4 mul 7 add 8 idiv 4 mul 65535 le and
store
smoothflag{
iw
ih
$z
iw 7 add 8 idiv 4 mul string
iw 4 mul 7 add 8 idiv 4 mul string
true
false
sc_initsmooth
/iw iw 4 mul store
/ih ih 4 mul store
}if
/setupimageproc datatype 0 eq datatype 1 eq or{
smoothflag{
{
[
/smooth_moredata cvx[
currentfile
$z
{readstring readhexstring}datatype get
/pop cvx
]cvx[
$z
]cvx/ifelse cvx
/sc_smooth cvx
/smooth_moredata/exch cvx/store cvx
]cvx bind
/smooth_moredata true store
dup exec pop dup exec pop
}
}{
{
[
currentfile
$z
{readstring readhexstring}datatype get
/pop cvx
]cvx bind
}
}ifelse
}{
(error, can't use level2 data acquisition procs for level1)print flush stop
}ifelse
store
}bd
/:j{im_save restore}bd
/:g
{
1 setgray
0 0 1 1 rF
0 setgray
iw ih polarity[iw 0 0 ih 0 0]setupimageproc
imagemask
}bd
/:h
{
:Fx
0 0 1 1 rF
:Fx
iw ih polarity[iw 0 0 ih 0 0]setupimageproc
imagemask
}bd
/:i
{
:Fx
iw ih polarity[iw 0 0 ih 0 0]setupimageproc
imagemask
}bd
%%EndFile
level2  endnoload level2 not startnoload
%%BeginFile: adobe_psp_level2_basicimage
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/$j 9 dict dup
begin
/ImageType 1 def
/MultipleDataSource false def
end
def
/im_save Z
/setupimageproc Z
/polarity Z
/smoothflag Z
/bpc Z
/ih Z
/iw Z
/datatype Z
/:f
{
/im_save save store
/datatype xs
datatype 0 lt datatype 8 gt or{
(error, datatype out of range)print flush stop
}if
/setupimageproc{
{
currentfile
}
{
currentfile 0(%ADOeod)/SubFileDecode filter/ASCIIHexDecode filter
}
{
currentfile/RunLengthDecode filter
}
{
currentfile/ASCII85Decode filter/RunLengthDecode filter
}
{
currentfile/ASCII85Decode filter
}
{
currentfile/DCTDecode filter
}
{
currentfile/ASCII85Decode filter/DCTDecode filter
}
{
currentfile 6 dict dup begin
/K 0 def
/EndOfLine true def
/EncodedByteAlign true def
/Rows Height def
/Columns Width def
/EndOfBlock true def
end/CCITTFaxDecode filter
}
{
currentfile/ASCII85Decode filter 6 dict dup begin
/K 0 def
/EndOfLine true def
/EncodedByteAlign true def
/Rows Height def
/Columns Width def
/EndOfBlock true def
end/CCITTFaxDecode filter
}
}datatype get store
{
[1 0]
}{
[0 1]
}ifelse
/polarity xs
/smoothflag xs
concat
pop
/bpc xs
/ih xs
/iw xs
$c setcolorspace
}bd
/:j{im_save restore}bd
/:g
{
1 G
0 0 1 1 rF
0 G
$j dup begin
/Width iw def
/Height ih def
/Decode polarity def
/ImageMatrix[iw 0 0 ih 0 0]def
/DataSource setupimageproc def
/BitsPerComponent 1 def
/Interpolate smoothflag def
end
imagemask
}bd
/:h
{
:Fx
0 0 1 1 rF
:Fx
$j dup begin
/Width iw def
/Height ih def
/Decode polarity def
/ImageMatrix[iw 0 0 ih 0 0]def
/DataSource setupimageproc def
/BitsPerComponent 1 def
/Interpolate smoothflag def
end
imagemask
}bd
/:i
{
:Fx
$j dup begin
/Width iw def
/Height ih def
/Decode polarity def
/ImageMatrix[iw 0 0 ih 0 0]def
/DataSource setupimageproc def
/BitsPerComponent 1 def
/Interpolate smoothflag def
end
imagemask
}bd
%%EndFile
level2 not endnoload
level2 startnoload
%%BeginFile: adobe_psp_level1_colorimage
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/testsystemdict
{
where
{
systemdict eq
{
true
}{
false
}ifelse
}{
false
}ifelse
}bd
/rgbclut Z
/bwclut Z
/ncolors 1 def
/colorimage where{pop true}{false}ifelse
{
/ncolors 0
statusdict begin
/processcolors where
{
pop
pop
processcolors
}{
/deviceinfo where
{pop deviceinfo/Colors known
{pop{deviceinfo/Colors get}}if
}if
}ifelse
end
store
ncolors 0 ne
{
/colorimage testsystemdict
/setcolortransfer testsystemdict
/currentcolortransfer testsystemdict
/currentcmykcolor testsystemdict
and and and not
{
/ncolors 0 store
}if
}if
}if
ncolors 1 ne ncolors 3 ne ncolors 4 ne and and{/ncolors 0 store}if
ncolors 1 ne dup startnoload
/expandfactor Z
/bwclut Z
/expandbw
{
expandfactor mul round cvi bwclut exch get 255 div
}bd
/:k
{
pop/bwclut xs
bpc dup 8 eq
{
pop 255
}{
4 eq
{
15
}{
3
}ifelse
}ifelse
/expandfactor xs
[
/expandbw load/exec load dup
currenttransfer exch
]cvx bind settransfer
iw ih bpc[iw 0 0 ih 0 0]setupimageproc
image
}bd
endnoload
ncolors dup 3 eq exch 4 eq or
not dup startnoload
/Dclut Z
/Cclut Z
/Bclut Z
/Aclut Z
/ncompute Z
/rclut Z
/gclut Z
/bclut Z
/bit3x Z
/bit1x Z
/concatutil
{
/exec load
7 -1 roll/exec load
}bd
/defsubclut
{
1 add getinterval store
}bd
/spconcattransfer
{
/Dclut xs
/Cclut xs
/Bclut xs
/Aclut xs
/ncompute exch load store
currentcolortransfer
[
{
Aclut ncompute
}
concatutil
]cvx
[
{
Bclut ncompute
}
concatutil
]cvx
[
{
Cclut ncompute
}
concatutil
]cvx
[
{
Dclut ncompute
}
concatutil
]cvx
setcolortransfer
}bd
/setuprgbcluts
{
/bit3x
rgbclut length
3 sub
store
/bit1x bit3x 3 idiv store
/rclut rgbclut store
/gclut rclut 1 bit3x defsubclut
/bclut rclut 2 bit3x defsubclut
}bd
endnoload
ncolors 3 ne
dup startnoload
/str Z
/len Z
/smlen Z
/rstr Z
/gstr Z
/bstr Z
/kstr Z
/cmykcluttorgbclut
{
/str xs
/len str length store
/smlen len 4 idiv store
/rstr str store
/gstr str 1 len 1 sub getinterval store
/bstr str 2 len 2 sub getinterval store
/kstr str 3 len 3 sub getinterval store
0 1 smlen 1 sub
{
dup 3 mul/str xs 4 mul/len xs
kstr len get
rstr dup len get
2 index add
255 exch sub dup 0 lt{pop 0}if
str exch put
gstr dup len get
2 index add
255 exch sub dup 0 lt{pop 0}if
str exch put
bstr dup len get
2 index add
255 exch sub dup 0 lt{pop 0}if
str exch put
pop
}for
rstr 0 smlen 3 mul getinterval
}bd
/3compute
{
exch bit3x
mul
round
cvi
get 255 div
}bd
/:k
{
/rgbclut xs
pop
$c/DeviceCMYK eq
{
rgbclut cmykcluttorgbclut/rgbclut xs
}if
setuprgbcluts
/3compute rclut gclut bclut dup
spconcattransfer
iw ih bpc[iw 0 0 ih 0 0]
[
setupimageproc/exec load
/dup load dup
]cvx
{}{}true 3 colorimage
}bd
endnoload
ncolors 4 ne
dup startnoload
/cmykindex Z
/bit4x Z
/cmykclut Z
/cclut Z
/mclut Z
/yclut Z
/kclut Z
/ftoint
{
1 exch sub 255 mul round cvi
}bd
/stuffclut
{
cmykindex 3 -1 roll put
}bd
/4compute{exch bit4x mul round cvi get 255 div}bd
/invalidcolortable? true def
/computecmykclut
{
setuprgbcluts
/bit4x
rgbclut length
3 idiv
4 mul
4 sub
store
/cmykclut bit4x 4 add string store
/cclut cmykclut store
/mclut cclut 1 bit4x defsubclut
/yclut cclut 2 bit4x defsubclut
/kclut cclut 3 bit4x defsubclut
/cmykindex 0 store
0 1 bit1x
{
dup/cmykindex exch
bit1x exch sub
4 mul store
3 mul dup
rclut exch get 255 div
exch dup
gclut exch get 255 div
exch
bclut exch get 255 div
setrgbcolor currentcmykcolor
ftoint
kclut stuffclut
ftoint
yclut stuffclut
ftoint
mclut stuffclut
ftoint
cclut stuffclut
}for
}bd
/innew Z
/reverse4clut
{
dup length dup 4 sub/innew xdf
string dup
3 -1 roll
{
255 exch sub
innew exch
put dup
innew 4 mod 3 eq
{
/innew innew 7 sub def
}{
/innew innew 1 add def
}ifelse
}forall
pop
}bd
/:k
{
/rgbclut xs
pop
$c/DeviceCMYK ne
{
computecmykclut
}{
/bit4x
rgbclut length 4 sub
store
/cmykclut rgbclut reverse4clut store
/cclut cmykclut store
/mclut cclut 1 bit4x defsubclut
/yclut cclut 2 bit4x defsubclut
/kclut cclut 3 bit4x defsubclut
}ifelse
/4compute cclut mclut yclut kclut spconcattransfer
iw ih bpc[iw 0 0 ih 0 0]
[
setupimageproc/exec load
/dup load dup dup
]cvx
{}{}{}
true 4 colorimage
}bd
endnoload
ncolors 0 ne
dup startnoload
/byte Z
/$x Z
/padfix Z
/lookupandstore
{
3 mul
3 getinterval
putinterval exch
3 add exch 3 copy
}bd
/8lookup/lookupandstore load store
/4lookup
{
/byte 1 index store
-4 bitshift
lookupandstore
byte 15 and
lookupandstore
}bd
/2lookup
{
/byte 1 index store
-6 bitshift
lookupandstore
byte -4 bitshift
3 and
lookupandstore
byte -2 bitshift
3 and
lookupandstore
byte 3 and
lookupandstore
}bd
/colorexpand
{
$x 0 rgbclut
3 copy
7 -1 roll
/$l load
forall
pop pop pop pop pop
0 padfix getinterval
}bd
/createexpandstr
{
/$x exch $z length mul string store
}bd
/:k
{
/rgbclut xs
/bwclut xs
/$l
bpc 8 eq
{
3 createexpandstr
/8lookup
}{
bpc 4 eq
{
6 createexpandstr
/4lookup
}{
12 createexpandstr
/2lookup
}ifelse
}ifelse
load store
/padfix 3 iw mul store
iw ih 8[iw 0 0 ih 0 0]
[setupimageproc/exec load/colorexpand load/exec load]cvx
false 3 colorimage
}bd
endnoload
/colorimage where
{
systemdict eq
{
systemdict/setcmykcolor known
}{
true
}ifelse
}{
false
}ifelse
dup not startnoload
/:l
{
iw ih 8[iw 0 0 ih 0 0]
setupimageproc false 3
$c/DeviceCMYK eq
{
pop 4
}if
colorimage
}bd
dup not endnoload
dup startnoload
/str Z
/len Z
/smlen Z
/rstr Z
/gstr Z
/bstr Z
/rgbtogray
{
/str xs
/len str length store
/smlen len 3 idiv store
/rstr str store
/gstr str 1 len 1 sub getinterval store
/bstr str 2 len 2 sub getinterval store
str dup
0 1 smlen 1 sub
{
dup 3 mul
rstr 1 index get .3 mul
gstr 2 index get .59 mul add
bstr 3 -1 roll get .11 mul add
round cvi
put dup
}for
pop 0 smlen getinterval
}bd
/kstr Z
/cmyktogray
{
/str xs
/len str length store
/smlen len 4 idiv store
/rstr str store
/gstr str 1 len 1 sub getinterval store
/bstr str 2 len 2 sub getinterval store
/kstr str 3 len 3 sub getinterval store
str dup
0 1 smlen 1 sub
{
dup 4 mul
rstr 1 index get .3 mul
gstr 2 index get .59 mul add
bstr 2 index get .11 mul add
kstr 3 -1 roll get add
round cvi
255 exch sub dup 0 lt{pop 0}if
put dup
}for
pop 0 smlen getinterval
}bd
/:l
{
iw ih 8[iw 0 0 ih 0 0]
[setupimageproc/exec load
$c/DeviceCMYK eq
{
/cmyktogray
}{
/rgbtogray
}ifelse
load/exec load]cvx bind
image
}bd
endnoload
%%EndFile
level2  endnoload level2 not startnoload
%%BeginFile: adobe_psp_level2_colorimage
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/rgbclut Z
/hival Z
/:k
{
/rgbclut xs
pop
bpc dup 8 eq
{
pop 255
}{
4 eq
{
15
}{
3
}ifelse
}ifelse
/hival xs
[/Indexed $c hival rgbclut]setcolorspace
$j dup begin
/Width iw def
/Height ih def
/Decode[0 hival]def
/ImageMatrix[iw 0 0 ih 0 0]def
/DataSource setupimageproc def
/BitsPerComponent bpc def
/Interpolate smoothflag def
end
image
}bd
/:l
{
$j dup begin
/Width iw def
/Height ih def
/Decode[[currentcolor]length{0 1}repeat]def
/ImageMatrix[iw 0 0 ih 0 0]def
/DataSource setupimageproc def
/BitsPerComponent 8 def
/Interpolate smoothflag def
end
image
}bd
%%EndFile
level2 not endnoload
%%BeginFile: adobe_psp_uniform_graphics
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/@a
{
np :M 0 rl :L 0 exch rl 0 rl :L fill
}bd
/@b
{
np :M 0 rl 0 exch rl :L 0 rl 0 exch rl fill
}bd
/arct where
{
pop
}{
/arct
{
arcto pop pop pop pop
}bd
}ifelse
/x1 Z
/x2 Z
/y1 Z
/y2 Z
/rad Z
/@q
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
fill
}bd
/@s
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
:K
stroke
}bd
/@i
{
np 0 360 arc fill
}bd
/@j
{
gS
np
:T
scale
0 0 .5 0 360 arc
fill
gR
}bd
/@e
{
np
0 360 arc
:K
stroke
}bd
/@f
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 0 360 arc
:K
$m setmatrix
stroke
}bd
/@k
{
gS
np
:T
0 0 :M
0 0 5 2 roll
arc fill
gR
}bd
/@l
{
gS
np
:T
0 0 :M
scale
0 0 .5 5 -2 roll arc
fill
gR
}bd
/@m
{
np
arc
stroke
}bd
/@n
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 5 -2 roll arc
$m setmatrix
stroke
}bd
%%EndFile
%%BeginFile: adobe_psp_customps
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/$t Z
/$p Z
/$s Z
/$o 1. def
/2state? false def
/ps Z
level2 startnoload
/pushcolor/currentrgbcolor ld
/popcolor/setrgbcolor ld
/setcmykcolor where
{
pop/currentcmykcolor where
{
pop/pushcolor/currentcmykcolor ld
/popcolor/setcmykcolor ld
}if
}if
level2 endnoload level2 not startnoload
/pushcolor
{
currentcolorspace $c eq
{
currentcolor currentcolorspace true
}{
currentcmykcolor false
}ifelse
}bd
/popcolor
{
{
setcolorspace setcolor
}{
setcmykcolor
}ifelse
}bd
level2 not endnoload
/pushstatic
{
ps
2state?
$o
$t
$p
$s
$cs
}bd
/popstatic
{
/$cs xs
/$s xs
/$p xs
/$t xs
/$o xs
/2state? xs
/ps xs
}bd
/pushgstate
{
save errordict/nocurrentpoint{pop 0 0}put
currentpoint
3 -1 roll restore
pushcolor
currentlinewidth
currentlinecap
currentlinejoin
currentdash exch aload length
np clippath pathbbox
$m currentmatrix aload pop
}bd
/popgstate
{
$m astore setmatrix
2 index sub exch
3 index sub exch
rC
array astore exch setdash
setlinejoin
setlinecap
lw
popcolor
np :M
}bd
/bu
{
pushgstate
gR
pushgstate
2state?
{
gR
pushgstate
}if
pushstatic
pm restore
mT concat
}bd
/bn
{
/pm save store
popstatic
popgstate
gS
popgstate
2state?
{
gS
popgstate
}if
}bd
/cpat{pop 64 div setgray 8{pop}repeat}bd
%%EndFile
%%BeginFile: adobe_psp_basic_text
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/S/show ld
/A{
0.0 exch ashow
}bd
/R{
0.0 exch 32 exch widthshow
}bd
/W{
0.0 3 1 roll widthshow
}bd
/J{
0.0 32 4 2 roll 0.0 exch awidthshow
}bd
/V{
0.0 4 1 roll 0.0 exch awidthshow
}bd
/fcflg true def
/fc{
fcflg{
vmstatus exch sub 50000 lt{
(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store
}if pop
}if
}bd
/$f[1 0 0 -1 0 0]def
/:ff{$f :mf}bd
/MacEncoding StandardEncoding 256 array copy def
MacEncoding 39/quotesingle put
MacEncoding 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute